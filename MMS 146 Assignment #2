# The Dog Class
class Dog:
	def __init__(self, n, b, l, m, t, g, h):
		self.name = n
		self.breed = b
		self.lonely = l
		self.meal = m
		self.thirsty = t
		self.gender = g
		self.hungry = h

	def give_name(self):
		self.name = self.name + self.gender

	def feed(self):
		self.hungry = self.meal + self.hungry
		
	def define_breed(self):
	    self.breed = "Breed: " + self.breed
	    
	def change_drink(self,t):
	    self.thirsty = "Change it to " + t + " sometimes" # the "t" will be replaceable
	    
	def lonely_dog(self):
	    self.lonely = "Give " + self.name + " " + self.lonely 
	    
''' 
This class shows a dog example and some basic information about it
The attributes contains information defining the dog as well as what it is feeling
The attributes are combined through methods to create informational texts

'''

# The Cellphone Class

class Cellphone:
	def __init__(self, b, v, rp, rg, bn):
		self.battery = b
		self.volume = v
		self.repair = rp
		self.register = rg
		self.brand = bn
		
	def define_brand(self):
	    self.brand = "The Cellphone's Brand: " + self.brand
	    
	def consume_battery(self):
	    self.battery = self.battery - 19 # used 19 to result 1% battery instead of 0 to multiply the value

	def healthy_battery(self):
		self.battery = self.battery * 100 # used 100 as it is the maximum healthy battery percentage

	def decrease_volume(self):
		self.volume = self.volume - 4 # the volumes follow the same concept as the battery percentage
		
	def increase_volume(self):
	    self.volume = self.volume * 10 
	    
	def repair_phone(self,rp):
	    self.repair = rp + " it yourself" # repair and register methods have replaceable parameters
	    
	def register_phone(self):
	    self.register = "Watch " + self.register
	    
''' 
This class shows a cellphone example and showcases value-based features such as volume and battery percentage
The attributes contains information about these features as well as possible cellphone 
concerns such as broken and unregistered devices
'''

# The Cooking Class

class Cooking: 
    def __init__(self,n,s,st,t,o): 
        self.name = n
        self.sour = s
        self.salty = st 
        self.time = t 
        self.tools = o 
        
    def food_name(self):
        self.name = self.name + "na baboy "
    
    def add_sugar(self): 
        self.sour = self.sour + 2 
        
    def add_water(self):
        self.salty = self.salty + 5 
        
    def meal_prep(self):
        self.time = self.time + 20 
        #time of meal prep 
    
    def pan_amount(self): 
        self.tools = self.tools + 2 
        #number of pan that will be used 


#The Color Class

class Color: 
    def __init__(self,g,o,p,t,s): 
        self.green = g
        self.orange = o 
        self.purple = p 
        self.tint = t 
        self.shade = s 
    
    def blue_yellow(self): 
        self.green = self.green + " = " + "blue + yellow"
    
    def yellow_red(self):
        self.orange = self.orange + " = "  + "yellow + red"
        
    def red_blue(self):
        self.purple = self.purple + " = " + "red + blue"
        
    def add_white(self):
        self.tint = self.tint + 5 
    
    def add_black(self):
        self.shade = self.shade + 1 
	

# The Plant Class

class Plant: 
    def __init__(self,t,l,s,p,f): 
        self.type = t 
        self.leaves = l 
        self.soil = s
        self.pot = p 
        self.fruit = f 
    
    def sunlight(self): 
        self.type = self.type + " = " + "full sun"
    
    def fertilize(self): 
        self.leaves = self.leaves * 1 
    
    def water(self): 
        self.soil = self.soil * 3 
        
    def seeds(self): 
        self.pot = self.pot * 5
        
    def harvest(self): 
        self.fruit = self.fruit - 10 
	
	

# The Main Program


#The Dog Class

dog1 = Dog("Pixie", " German Shepherd", "some cuddles", "dog food "," water", " Girl", "at least 2 times a day" )

print ("The Dog Class")

print() # added this for space

print ("The Dog's Nickname: ", dog1.name)
dog1.give_name()
print ("The Dog's Full Name: ", dog1.name)
dog1.define_breed()
print (dog1.breed)
dog1.feed()
print(dog1.name, "must be given",dog1.hungry )
print("Give it some", dog1.thirsty,"when thirsty")
dog1.change_drink("milk")
print (dog1.thirsty)
dog1.lonely_dog()
print (dog1.lonely)

print()
print("---------------------------") # added this for division of classes

# The Cellphone Class

phone1 = Cellphone( 20, 5, "Seek professional help", "online tutorials", "OPPO")

print("The Cellphone Class")

print() # added this for space

phone1.define_brand()
print (phone1.brand)
print ("Battery Percentage Before Using the Cellphone: ", phone1.battery, "%")
phone1.consume_battery()
print ("Battery Percentage After Using the Cellphone: ", phone1.battery, "%")
phone1.healthy_battery()
print ("Battery Percentage After Charging the Cellphone: ",phone1.battery, "%")
print ("The Cellphone's Current Volume: ", phone1.volume)
phone1.decrease_volume()
print ("The Cellphone's Volume After Decreasing: ", phone1.volume)
phone1.increase_volume()
print ("The Cellphone's Volume After Increasing: ", phone1.volume)
print ("If the Cellphone is broken: ", phone1.repair )
phone1.repair_phone("repair")
print ("    Or ", phone1.repair)
phone1.register_phone()
print ("To Register the Cellphone: ", phone1.register)


print()
print("---------------------------") # added this for division of classes
        
# The Cooking Class

cooking1 = Cooking ("Sinigang ", 1, 10, 0, 0)
        
print("The Cooking Class")
 
cooking1.food_name() #this first then print 
print ("Recipe name: ",cooking1.name) 

cooking1.meal_prep() 
print ("Meal Prep Time: ",cooking1.time, " minutes") 

cooking1.pan_amount() 
print ("Use ", cooking1.tools, " pans for this recipe")

cooking1.add_sugar() 
print ("If sour, add ", cooking1.sour, " tbsps")

cooking1.add_water() 
print ("If salty, add ", cooking1.salty, " cups")

"""
Attributes and methods of cooking are constructed based on our observations in cooking food. For example, when the food is too sour, the method to resolve it is by adding something sweet like sugar. Learning other food techniques also helped us to form the attributes and methods. 
"""


print()
print("---------------------------") # added this for division of classes

#The Color Class

color1 = Color("Green", "Orange", "Purple", 10, 4) 

print("The Color Class")

#PRINT color combination equations  
color1.blue_yellow()
print (color1.green) 

color1.yellow_red()
print (color1.orange)

color1.red_blue()
print (color1.purple)

color1.add_white()
print ("For Tint... ", "Add White = ", color1.tint)

color1.add_black()
print ("For Shade... ", "Add Black = ", color1.shade)

""" 
Attributes and methods for colors were influenced by the color wheel. To create colors, a certain mixture of pigments is needed to develop the desired color. Color combinations help produce hue, tint, and shades. 
"""


print()
print("---------------------------") # added this for division of classes


# The Plant Class

#plant1 = Plant("Pothos", l, s, p, f)
plant1 = Plant("Pothos", 1, 1, 2, 25)

print("The Color Class")

plant1.sunlight()
print("Amount of sunlight for ", plant1.type)

plant1.fertilize()
print("When color of leaves changes, fertilize for", plant1.leaves, "x every other week")

plant1.water()
print("Water plant", plant1.soil, "x a week")

plant1.seeds()
print("Sow", plant1.pot, "seeds per container pot")

plant1.harvest()
print("Harvest", plant1.fruit, "ripe fruits when the plant produces")


"""
This class's attributes and methods demonstrate the fundamentals of planting and what a plant possesses. The methods mostly include the basic planting process, from preparation through harvesting. The methods are regulated by the plant's attributes. A plant that cannot grow fruits, for example, will render the method "plant.harvest fruit()" worthless and irrelevant in the code.
"""

